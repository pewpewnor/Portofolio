generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: THREAD SECTION

model ThreadChannel {
  id        String @id @default(cuid())
  channelId String @unique

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// TODO: BOARD SECTION

model Label {
  id     String @id @default(cuid())
  text   String
  color  String
  cardId String

  Card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Card {
  id       String @id @default(cuid())
  title    String
  sections Json?
  pillarId String

  labels Label[]
  Pillar Pillar  @relation(fields: [pillarId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Pillar {
  id             String @id @default(cuid())
  title          String
  boardChannelId String

  cards        Card[]
  BoardChannel BoardChannel @relation(fields: [boardChannelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BoardChannel {
  id        String @id @default(cuid())
  channelId String @unique

  pillars Pillar[]
  channel Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// CHANNEL SECTION

enum ChannelType {
  THREAD
  BOARD
}

model Channel {
  id               String      @id @default(cuid())
  name             String
  type             ChannelType
  channelSectionId String

  boardChannel   BoardChannel?
  threadChannel  ThreadChannel?
  channelSection ChannelSection @relation(fields: [channelSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Maybe for later features once error message box is added:
  // @@unique([channelSectionId, name, type])
}

model ChannelSection {
  id          String @id @default(cuid())
  name        String
  workspaceId String

  channels  Channel[]
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// WORKSPACE SECTION

model Workspace {
  id                   String    @id @default(cuid())
  name                 String
  workspaceImage       Bytes?
  ownerId              String
  inviteId             String?   @unique
  inviteExpirationDate DateTime?

  channelSections ChannelSection[]
  owner           User             @relation("OwnedWorkspaces", fields: [ownerId], references: [id], onUpdate: Cascade)
  members         User[]           @relation("MemberWorkspaces")
}

// CLIENT SECTION

model User {
  ownedWorkspaces  Workspace[] @relation("OwnedWorkspaces")
  memberWorkspaces Workspace[] @relation("MemberWorkspaces")

  // The following properties and relations are used by next-auth, DO NOT CHANGE

  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

// The following models are used by next-auth, DO NOT CHANGE

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
